package Screens;

import com.mygdx.game.MyGDXGame;
import crystals.Crystal;
import Bullets.Bullet;
import Bullets.BulletManager;
import Opponents.Robot;
import map.CustomWorld;

import InputHandlers.PlayScreenInputHandler;
import Scenes.ExitToMainMenu;
import Scenes.Debug;
import Scenes.HUD;
import Sprites.Player;

import serializableObjects.RobotDataMap;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.utils.viewport.Viewport;
import com.badlogic.gdx.utils.viewport.FitViewport;

import com.badlogic.gdx.audio.Music;

//
import com.badlogic.gdx.maps.tiled.TiledMap;
//

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class PlayScreen implements Screen {
    private MyGDXGame game;
    public World world;
    public Player player;
    private Box2DDebugRenderer b2ddr = new Box2DDebugRenderer();
    private final TextureAtlas playerAtlas = new TextureAtlas("player/player_spritesheet.atlas");
    private final TextureAtlas robotAtlas = new TextureAtlas("Opponents/Robot.atlas");

    public static OrthographicCamera gameCam = new OrthographicCamera();

    private Viewport gamePort;

    private float prevPosX = 0;
    private float prevPosY = 0;
    public float startPosX;
    public float startPosY;

    private int prevFrameIndex = 0;

    private Debug debug;
    public HUD hud;
    public BulletManager bulletManager;

    private PlayScreenInputHandler handler;

    public static RobotDataMap robotDataMap;
    public static List<String> robotIds = new ArrayList<>();

    public final ExitToMainMenu pauseDialog;

    private Music music;
    private TiledMap map;

    public static Set<String> destroyedRobots = new HashSet<>();
    public static Set<String> allDestroyedRobots = new HashSet<>();
    public static Set<String> allDestroyedPlayers = new HashSet<>();

    public static HashMap<String, Robot> robots = new HashMap<>();
    public static List<Crystal> crystals = new ArrayList<>();

    private final MenuScreen menuScreen;
    
    private CustomWorld customWorld;

    public PlayScreen(MyGDXGame game, String worldUUID, MenuScreen menu) {
        this.menuScreen = menu;
        this.game = game;

        world = new World(new Vector2(0, 0), true);
        player = new Player(world, this);

        customWorld = new CustomWorld(1, world, game.batch);

        gamePort = new FitViewport(MyGDXGame.V_WIDTH / MyGDXGame.PPM, MyGDXGame.V_HEIGHT / MyGDXGame.PPM, gameCam);

        pauseDialog = new ExitToMainMenu(game.batch, menu, this);
        hud = new HUD(game.batch, player);
        debug = new Debug(game.batch, player);

        handler = new PlayScreenInputHandler(this);
    }

    @Override
    public void show() {
        Gdx.input.setInputProcessor(handler);
    }

    public void update(float dt) throws IOException {
        world.step(1 / 60f, 6, 2);

        player.update(dt);

        gameCam.position.x = player.b2body.getPosition().x;
        gameCam.position.y = player.b2body.getPosition().y;
        gameCam.update();

        prevPosX = gameCam.position.x;
        prevPosY = gameCam.position.y;

        player.prevState = player.currentState;
        prevFrameIndex = player.getCurrentFrameIndex();

        customWorld.generateWorld(player);

        // System.out.println(player.b2body.getPosition());
    }

    @Override
    public void render(float delta) {
        handler.handleInput();

        try {
            update(delta);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        Gdx.gl.glClearColor(0, 0, 0, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        game.batch.setProjectionMatrix(gameCam.combined);
        game.batch.begin();

        customWorld.renderWorld(player);
        // b2ddr.render(customWorld.getBox2DWorld(), gameCam.combined);

        player.draw(game.batch);

        game.batch.end();
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void hide() {
    }

    @Override
    public void dispose() {
        map.dispose();
        playerAtlas.dispose();
    }

     @Override
     public void resize(int width, int height) {
         gamePort.update(width, height);

         handler.keyPresses = 0;
         handler.keysPressed.clear();

         hud.stage.getViewport().update(width, height, true);
         pauseDialog.stage.getViewport().update(width, height, true);
     }


    public TextureAtlas getPlayerAtlas() {
        return playerAtlas;
    }

    public void changeInputToHandler() {
        Gdx.input.setInputProcessor(handler);
    }

    public void goToMenuWhenPlayerIsDead() throws IOException {
        world.destroyBody(player.b2body);
        MyGDXGame.playerDict.clear();
        game.dispose();
        music.dispose();

        // currently we have not yet decided what to do when the player dies
        // bcs the dead players go back to the main menu, it is logical to
        // remove their connection with the server
        MyGDXGame.client.close();
        MyGDXGame.client.dispose();

        // starts the music
        menuScreen.music.play();
        game.setScreen(menuScreen);
    }

    public TextureAtlas getRobotAtlas() {
        return robotAtlas;
    }

}

